reef<-reefs%>%
filter(Name==reefName)
return(reef)
}
get_reefs<-function(selVal){
this.region<-regions%>%
filter(Name==selVal)%>%
st_make_valid()%>%
st_transform(4326)
this.reefs<-reefs%>%
st_filter(x = ., y=this.region)
return(this.reefs)
}
# ##DEBUGING
# input=list(region_select="NRM",
#            report_year=2021,
#            value_select="Fitzroy",
#            reference="Critical")
# input=list(region_select="GBRMPA.MA",
# report_year=2021,
# value_select="Townsville/Whitsunday Management Area")
# input=list(region_select="Reef",
#            report_year=2021,
#            value_select="Pandora Reef")
# output=list()
# input=list(region_select="TUMRA",
#            report_year=2021,
#            value_select="Lama Lama")
##Load Files####
# load("GIS/reef.LatLongs.RData")
# reefs=list(reef.LatLongs$REEF)
gbrmpa<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Great_Barrier_Reef_Marine_Park_Boundary/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
mutate(Region="GBR", Name="GBRMP")%>%
select(Name,Region, geometry)
tumra<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Traditional_Use_of_Marine_Resources_Agreement_areas/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
select(NAME, geometry)%>%rename(Name=NAME)%>%
group_by(Name)%>%
mutate(Region="TUMRA")
ma<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Management_Areas_of_the_Great_Barrier_Reef_Marine_Park/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
select(AREA_DESCR, geometry)%>%rename(Name=AREA_DESCR)%>%
mutate(Region="GBRMPA_Management")
nrm<-nrm_regions%>%
select(NAME, geometry)%>%rename(Name=NAME)%>%
mutate(Region= "NRM")
regions=ma%>%bind_rows(nrm,tumra, gbrmpa)
##Load data
load("data/scores.RData")
reefs<-scores%>%ungroup%>%
filter(Level=="reef")%>%
select(c(Name,Depth,Latitude,Longitude))%>%
unique()%>%
st_as_sf(., coords = c("Longitude", "Latitude"), crs = 4326)
runApp()
runApp()
C:/Users/mgonzale/gits/ReefCondition_Dashboard/server.R
runApp()
View(scores)
runApp()
runApp()
runApp()
selVal=NULL
length(selVal)
runApp()
runApp()
runApp()
is.null(input$value_select)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Ancilliary Functions
source("scripts/plotting_functions/reef_mapping.R")
source("scripts/plotting_functions/radial.plot.summary.R")
source("scripts/plotting_functions/temporal_plots.R")
source("scripts/Misc/HighLevel_Classification.R")
source("scripts/Misc/Rep_3.1_Regional_autoText_working.R")
runApp()
runApp()
rsconnect::showLogs()
runApp()
runApp()
write_csv(scores, file="scores.csv")
runApp()
##Load data
read_csv("scores.csv")
runApp()
input=list(region_select="Reef",
report_year=2021,
value_select="North Direction Island (deep)")
cat("Selection:", input$value_select, "\n")
if (input$region_select=="Reef"){
r<-get_reef(input$value_select)
}else{
r<-get_reefs(selVal = input$value_select)
}
cat(input$value_select)
if(is.null(input$value_select)){
i.df=NULL
dat=NULL
}else{
i.df<-scores%>%filter(
Name==input$value_select)
i.df.r<-scores%>%filter(
Name %in% r$Name)
dat<-i.df%>%filter(
Year==input$report_year)
if (dim(dat)[1]>0){
dat<-dat%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
if(dim(i.df)[1]==0){
dat.temp<-data.frame()
}else{
dat.temp<-i.df%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
this.region<-regions%>%
filter(Name==input$value_select)%>%
st_make_valid()%>%
st_transform(4326)
}
cat("Plotting Map",  "\n")
output$reactive_condition=renderText({
if (dim(dat)[1]==0){
add.txt= ";display:inline-block;border:none;border-radius:16px;color:black;padding:10px 20px;display: nline-block;margin:4px 2px"
tc<-paste0("<button class='pill-btn' style='background-color:","#C8C8C8", add.txt, "'>", "No data", "</button>")
}else{
p<-data.frame(Class=c("Insufficient data","Critical", "Warning II","Warning I", "Watch", "Good"),
col=c("#F0F0F0","#EF3A14" ,"#F3841C", "#EFC214",'#8ace7e', "#309143"))
tc<-dat%>%
filter(Reference=="Baseline")%>%
ungroup%>%
Cond.Class()%>%
select(Class)%>%
left_join(p)
'<a style="text-decoration:none;cursor:default;color:#FFFFFF;"'
add.txt= ";display:inline-block;border:none;border-radius:16px;color:black;padding:10px 20px;display: nline-block;margin:4px 2px"
tc<-paste0("<button class='pill-btn' style='background-color:",tc$col, add.txt, "'>", tc$Class, "</button>")
}
})
output$clean_region_reactive=renderText({
if(dim(i.df)[1]==0){
name_text=paste0('<b>',input$region_select,': </b>',input$value_select)
}else{
name_text<-dat%>%
select(Level,Name)%>%
unique()%>%
mutate(Level=case_when(
Level=="GBRMPA.MA" ~ "Management Area",
.default=Level),
Name=case_when(
Level=="Management Area" ~ str_remove_all(Name, " Management Area"),
.default = Name),
clean_name=paste0('<b>',Level,': </b>',Name))%>%
ungroup()%>%
select(clean_name)%>%
unique()%>%as.character()
name_text
}
})
sf.frame=i.df.r
reef=r
b=this.region
y=2021
qpal <- colorFactor(palette = c("#FFFFFF","#EF3A14" ,"#F3841C", "#EFC214",'#8ace7e', "#309143"),
levels = c("Insuficient data","Critical", "Warning II","Warning I", "Watch", "Good"),
reverse = F,
# sf.frame$Class,
# domain=c("Critical", "WarningII","WarningI", "Watch", "Good"),
ordered=T,
na.color = "#808080")
lval=factor(c("Insuficient data","Critical", "Warning II","Warning I", "Watch", "Good"),
levels=c("Insuficient data","Critical", "Warning II","Warning I", "Watch", "Good"))
Name.Labels =function(Name){
sprintf(
"<strong>%s</strong><br/>",
sf.frame$Name
) %>% lapply(htmltools::HTML)
}
factop <- function(x) {
ifelse(is.na(x), 0.1, 0.6)
}
if(dim(sf.frame%>%filter(Year==y,
Reference=="Baseline"
))[1]==0){ #Display "no data" box if the reef/region are not surveyed
leaflet() %>%
addProviderTiles("CartoDB.DarkMatter", group="Dark")%>%
addProviderTiles("Esri.WorldImagery", group="Satellite")%>%
addLayersControl(baseGroups = c("Dark","Satellite"))
}else{
sf.frame<-sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()%>%Cond.Class()%>%
unique()%>%
mutate(Class=factor(Class,levels=c("Insuficient data","Critical", "WarningII","WarningI", "Watch", "Good")))
sf.frame<-reef%>%left_join(sf.frame,by=c("Name","Depth"))
#
leaflet(sf.frame) %>%
# addMarkers(label=~Name)%>%
addProviderTiles("CartoDB.DarkMatter", group="Dark")%>%
addProviderTiles("Esri.WorldImagery", group="Satellite")%>%
# addEsriTiledMapLayer(
#   url = "https://tiles.arcgis.com/tiles/ll1QQ2mI4WMXIXdm/arcgis/rest/services/SSR_Sentinel_2018/MapServer",
#   group="Satellite")%>%
addCircleMarkers(data=sf.frame, label = ~Name, fillColor =  ~qpal(Class),
# popup = ~c(Name,Class),
popup = ~paste(Name.Labels(Name),
"<br>Coral Cover above reference:",Coral.cover,
"<br>Recovery above reference:",Performance,
"<br>Processes above reference:", Processes),
fillOpacity = ~factop(Class),
stroke=F,
fill=T)%>%
# addLegend("bottomright", pal = qpal, values = sf.frame$Score[!is.na(sf.frame$Score)],
addLegend("bottomright", pal = qpal, values = lval,
title = "Overall Condition",
opacity = 1)%>%
# Use addLayersControl to allow users to toggle between basemaps
addLayersControl(baseGroups = c("Dark","Satellite"))%>%# groupOptions("Satellite", zoomLevels = 8:15)
addPolygons(data=b%>%
st_cast(.,"POLYGON")%>%
st_transform(4326),
fill=F,
weight=2,
opacity=0.9,
color="white",
dashArray = "3"
)
}
sf.frame
View(sf.frame)
sf.frame=i.df.r
df<-i.df
##Agregate indicators for high-level criteria per Reef
c.df<-df%>%
group_by(Name,Depth,Year,Indicator)%>%
# rename(Score=Median)%>%
mutate(
crit=case_when(
((Indicator %in% c("Composition","Macroalgae","Juvenile", "Coral.cover")) &
Upper<=0.5) ~T, ##at or Below threshold for most of the indicators
((Indicator == "Performance") &
Upper<0.5) ~ T,##[TODO:REview this] Below threshold for Recovery
is.na(Median) ~NA,
.default=F
),
Ind.g=case_when(
Indicator %in% c("Composition","Macroalgae","Juvenile") ~ "Processes",
.default=Indicator
)
)%>%
group_by(Name, Depth,Year, Ind.g)%>%
summarise(crit.no=sum(crit))%>%
mutate(
# crit.yes=case_when(
#   Surveyed==FALSE ~NA,
#   .default=crit.yes
# ),
crit=case_when(
((Ind.g =="Coral.cover") & crit.no==1) ~ "No",
((Ind.g =="Coral.cover")  &  crit.no==0) ~ "Yes",
((Ind.g =="Performance")  &  crit.no==1) ~ "No",
((Ind.g =="Performance")  &  crit.no==0) ~ "Yes",
((Ind.g %in% c("Processes")  &  crit.no==3)) ~ "All.No",
((Ind.g %in% c("Processes")  &  crit.no==0)) ~ "All.Yes",
((Ind.g %in% c("Processes")  & crit.no %in% (c(1,2)))) ~ "AtLeastOne.No",
.default = NA)
)%>%
select(-crit.no)%>%
spread(key=Ind.g, val=crit)%>%
mutate(all.na=sum(c(is.na(Coral.cover),is.na(Performance),is.na(Processes))))
c.df
df%>%
group_by(Name,Depth,Year,Indicator)%>%
# rename(Score=Median)%>%
mutate(
crit=case_when(
((Indicator %in% c("Composition","Macroalgae","Juvenile", "Coral.cover")) &
Upper<=0.5) ~T, ##at or Below threshold for most of the indicators
((Indicator == "Performance") &
Upper<0.5) ~ T,##[TODO:REview this] Below threshold for Recovery
is.na(Median) ~NA,
.default=F
),
Ind.g=case_when(
Indicator %in% c("Composition","Macroalgae","Juvenile") ~ "Processes",
.default=Indicator
)
)
View(c.df)
df<-sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()
##Agregate indicators for high-level criteria per Reef
c.df<-df%>%
group_by(Name,Depth,Year,Indicator)%>%
# rename(Score=Median)%>%
mutate(
crit=case_when(
((Indicator %in% c("Composition","Macroalgae","Juvenile", "Coral.cover")) &
Upper<=0.5) ~T, ##at or Below threshold for most of the indicators
((Indicator == "Performance") &
Upper<0.5) ~ T,##[TODO:REview this] Below threshold for Recovery
is.na(Median) ~NA,
.default=F
),
Ind.g=case_when(
Indicator %in% c("Composition","Macroalgae","Juvenile") ~ "Processes",
.default=Indicator
)
)%>%
group_by(Name, Depth,Year, Ind.g)%>%
summarise(crit.no=sum(crit))%>%
mutate(
# crit.yes=case_when(
#   Surveyed==FALSE ~NA,
#   .default=crit.yes
# ),
crit=case_when(
((Ind.g =="Coral.cover") & crit.no==1) ~ "No",
((Ind.g =="Coral.cover")  &  crit.no==0) ~ "Yes",
((Ind.g =="Performance")  &  crit.no==1) ~ "No",
((Ind.g =="Performance")  &  crit.no==0) ~ "Yes",
((Ind.g %in% c("Processes")  &  crit.no==3)) ~ "All.No",
((Ind.g %in% c("Processes")  &  crit.no==0)) ~ "All.Yes",
((Ind.g %in% c("Processes")  & crit.no %in% (c(1,2)))) ~ "AtLeastOne.No",
.default = NA)
)%>%
select(-crit.no)%>%
spread(key=Ind.g, val=crit)%>%
mutate(all.na=sum(c(is.na(Coral.cover),is.na(Performance),is.na(Processes))))
View(c.df)
c.df$Class=apply(
do.call(rbind,
Map(function(x, y) with(c.df, ifelse(eval(parse(text = x)), y, NA)),
cond.crit$criteria, cond.crit$Class)), 2, function(x) toString(x[!is.na(x)]))
#High-Level classification of Reef Habitat condition
cond.crit=data.frame(Class=c("Insuficient data",
"Critical","Critical",
"Warning II","Warning II","Warning II",
"Warning I","Warning I","Warning I",
"Watch","Watch","Watch",
"Good"),
criteria=c(
##No all indicators are calculated
'all.na>0',
#Critical
'Coral.cover=="No" & Performance=="No" & Processes=="All.No"',
'Coral.cover=="No" & Performance=="No" & Processes=="AtLeastOne.No"',
#Warning II
'Coral.cover=="No" & Performance=="No" & Processes=="All.Yes"',
'Coral.cover=="No" & Performance=="Yes" & Processes=="All.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="All.No"',
#Warning I
'Coral.cover=="No" & Performance=="Yes" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="All.No"',
#Watch
'Coral.cover=="No" & Performance=="Yes" & Processes=="All.Yes"',
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="All.Yes"',
#Good
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="All.Yes"'
)
)
c.df$Class=apply(
do.call(rbind,
Map(function(x, y) with(c.df, ifelse(eval(parse(text = x)), y, NA)),
cond.crit$criteria, cond.crit$Class)), 2, function(x) toString(x[!is.na(x)]))
View(cond.crit)
View(c.df)
Cond.Class<-function(df){
#High-Level classification of Reef Habitat condition
cond.crit=data.frame(Class=c("Insuficient data",
"Critical","Critical",
"Warning II","Warning II","Warning II",
"Warning I","Warning I","Warning I",
"Watch","Watch","Watch",
"Good"),
criteria=c(
##No all indicators are calculated
'all.na>0',
#Critical
'Coral.cover=="No" & Performance=="No" & Processes=="All.No"',
'Coral.cover=="No" & Performance=="No" & Processes=="AtLeastOne.No"',
#Warning II
'Coral.cover=="No" & Performance=="No" & Processes=="All.Yes"',
'Coral.cover=="No" & Performance=="Yes" & Processes=="All.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="All.No"',
#Warning I
'Coral.cover=="No" & Performance=="Yes" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="All.No"',
#Watch
'Coral.cover=="No" & Performance=="Yes" & Processes=="All.Yes"',
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="AtLeastOne.No"',
'Coral.cover=="Yes" & Performance=="No" & Processes=="All.Yes"',
#Good
'Coral.cover=="Yes" & Performance=="Yes" & Processes=="All.Yes"'
)
)
require(tidyverse)
if (dim(df)[1]==0){
c.df=NA
}else{
##Agregate indicators for high-level criteria per Reef
c.df<-df%>%
group_by(Name,Depth,Year,Indicator)%>%
# rename(Score=Median)%>%
mutate(
crit=case_when(
((Indicator %in% c("Composition","Macroalgae","Juvenile", "Coral.cover")) &
Upper<=0.5) ~T, ##at or Below threshold for most of the indicators
((Indicator == "Performance") &
Upper<0.5) ~ T,##[TODO:REview this] Below threshold for Recovery
is.na(Median) ~NA,
.default=F
),
Ind.g=case_when(
Indicator %in% c("Composition","Macroalgae","Juvenile") ~ "Processes",
.default=Indicator
)
)%>%
group_by(Name, Depth,Year, Ind.g)%>%
summarise(crit.no=sum(crit))%>%
mutate(
# crit.yes=case_when(
#   Surveyed==FALSE ~NA,
#   .default=crit.yes
# ),
crit=case_when(
((Ind.g =="Coral.cover") & crit.no==1) ~ "No",
((Ind.g =="Coral.cover")  &  crit.no==0) ~ "Yes",
((Ind.g =="Performance")  &  crit.no==1) ~ "No",
((Ind.g =="Performance")  &  crit.no==0) ~ "Yes",
((Ind.g %in% c("Processes")  &  crit.no==3)) ~ "All.No",
((Ind.g %in% c("Processes")  &  crit.no==0)) ~ "All.Yes",
((Ind.g %in% c("Processes")  & crit.no %in% (c(1,2)))) ~ "AtLeastOne.No",
.default = NA)
)%>%
select(-crit.no)%>%
spread(key=Ind.g, val=crit)%>%
mutate(all.na=sum(c(is.na(Coral.cover),is.na(Performance),is.na(Processes))))
c.df$Class=apply(
do.call(rbind,
Map(function(x, y) with(c.df, ifelse(eval(parse(text = x)), y, NA)),
cond.crit$criteria, cond.crit$Class)), 2, function(x) toString(x[!is.na(x)]))
}
return(c.df)
}
sf.frame<-sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()%>%Cond.Class()%>%
unique()%>%
mutate(Class=factor(Class,levels=c("Insuficient data","Critical", "WarningII","WarningI", "Watch", "Good")))
sf.frame<-reef%>%left_join(sf.frame,by=c("Name","Depth"))
View(sf.frame)
sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()%>%Cond.Class()
sf.frame=i.df.r
sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()%>%Cond.Class()
sf.frame<-sf.frame%>%filter(Year==y,
Reference=="Baseline")%>%
# Depth %in% c(NA,"deep slope"))%>%
select(-c(Latitude,Longitude))%>%
distinct()%>%
ungroup()%>%Cond.Class()%>%
unique()%>%
mutate(Class=factor(Class,levels=c("Insuficient data","Critical", "Warning II","Warning I", "Watch", "Good")))
View(sf.frame)
runApp()
