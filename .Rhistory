# Make the plot
ggplot(dat, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Class)) +
geom_rect() +
# geom_text( x=2, aes(y=labelPosition, label=label, color=Class), size=6) + # x here controls label position (inner / outer)
scale_fill_manual(values=cond.palette) +
scale_color_manual(values=cond.palette) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
dat
dat = r %>%
st_drop_geometry()%>%
filter(Surveyed)%>%
group_by(Class)%>%
count() %>%
ungroup()%>%
arrange(desc(Class)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
label= paste0(percentage, "\n n= ", n),
Class=factor(Class, levels= c("Critical", "WarningII","WarningI", "Watch", "Good")))%>%
filter(Class!=NA)
dat = r %>%
st_drop_geometry()%>%
# filter(Surveyed)%>%
group_by(Class)%>%
count() %>%
ungroup()%>%
arrange(desc(Class)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
label= paste0(percentage, "\n n= ", n),
Class=factor(Class, levels= c("Critical", "WarningII","WarningI", "Watch", "Good")))%>%
filter(Class!=NA)
ggplot(data = dat,
aes(x = 2, y = percentage, fill = Class))+
geom_bar(stat = "identity")+
coord_polar("y", start = 200) +
geom_text(aes(y = lab.pos, label = paste(percentage,"%", sep = "")), col = "white") +
theme_void() +
scale_fill_manual(values = cond.palette)+
xlim(.2,2.5)
dat
r %>%
st_drop_geometry()%>%
# filter(Surveyed)%>%
group_by(Class)%>%
count() %>%
ungroup()%>%
arrange(desc(Class)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
label= paste0(percentage, "\n n= ", n),
Class=factor(Class, levels= c("Critical", "WarningII","WarningI", "Watch", "Good")))%>%
filter(Class!=NA)
r %>%
st_drop_geometry()%>%
# filter(Surveyed)%>%
group_by(Class)%>%
count() %>%
ungroup()%>%
arrange(desc(Class)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
label= paste0(percentage, "\n n= ", n),
Class=factor(Class, levels= c("Critical", "WarningII","WarningI", "Watch", "Good")))%>%
filter(!is.na(Class))
dat = r %>%
st_drop_geometry()%>%
# filter(Surveyed)%>%
group_by(Class)%>%
count() %>%
ungroup()%>%
arrange(desc(Class)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
label= paste0(percentage, "\n n= ", n),
Class=factor(Class, levels= c("Critical", "WarningII","WarningI", "Watch", "Good")))%>%
filter(!is.na(Class))
ggplot(data = dat,
aes(x = 2, y = percentage, fill = Class))+
geom_bar(stat = "identity")+
coord_polar("y", start = 200) +
geom_text(aes(y = lab.pos, label = paste(percentage,"%", sep = "")), col = "white") +
theme_void() +
scale_fill_manual(values = cond.palette)+
xlim(.2,2.5)
ggplot(data = dat,
aes(x = 2, y = percentage, fill = Class))+
geom_bar(stat = "identity")+
coord_polar("y", start = 200) +
# geom_text(aes(y = lab.pos, label = paste(percentage,"%", sep = "")), col = "white") +
theme_void() +
scale_fill_manual(values = cond.palette)+
xlim(.2,2.5)
p<-plotly(p)
p
p<-ggplot(data = dat,
aes(x = 2, y = percentage, fill = Class))+
geom_bar(stat = "identity")+
coord_polar("y", start = 200) +
# geom_text(aes(y = lab.pos, label = paste(percentage,"%", sep = "")), col = "white") +
theme_void() +
scale_fill_manual(values = cond.palette)+
xlim(.2,2.5)
p<-plotly(p)
p<-ggplotly(p)
library(shiny); runApp('C:/Users/mgonzale/OneDrive - Australian Institute of Marine Science/projects/RIMReP/Habitat_Indicators/scripts/app/Cond_app.R')
library(shinydashboard)
library(leaflet)
library(leaflet.esri)
library(tidyverse)
library(readr)
library(sf)
library(gisaimsr)
library(data.table)
library(fontawesome)
library(dataaimsr)
library(shinythemes)
library(shinyWidgets)
# library(shiny)
# library(shinydashboard)
# library(gisaimsr)
# library(sf)
# library(leaflet)
# library(shiny)
#Ancilliary Functions
source("scripts/plotting_functions/reef_mapping.R")
setwd("~/GitHub/ReefCondition_Dashboard/")
library(shinydashboard)
library(leaflet)
library(leaflet.esri)
library(tidyverse)
library(readr)
library(sf)
library(gisaimsr)
library(data.table)
library(fontawesome)
library(dataaimsr)
library(shinythemes)
library(shinyWidgets)
# library(shiny)
# library(shinydashboard)
# library(gisaimsr)
# library(sf)
# library(leaflet)
# library(shiny)
#Ancilliary Functions
source("scripts/plotting_functions/reef_mapping.R")
source("scripts/plotting_functions/radial.plot.summary.R")
source("scripts/plotting_functions/temporal_plots.R")
source("scripts/plotting_functions/comp_change.R")
source("scripts/plotting_functions/DonutCond.R")
source("scripts/Misc/HighLevel_Classification.R")
source("scripts/Misc/Rep_3.1_Regional_autoText_working.R")
source("scripts/Misc/Rep_3.1_Reef_autoText.R")
get_reef<-function(reefName){
reef<-reefs%>%
filter(Name==reefName)
return(reef)
}
get_reefs<-function(selVal="Townsville/Whitsunday Management Area"){
if(length(selVal)==0){
this.reefs=NA
}else{
this.region<-regions%>%
filter(Name==selVal)%>%
st_make_valid()%>%
st_transform(4326)
this.reefs<-reefs%>%
st_filter(x = ., y=this.region)
}
return(this.reefs)
}
# ##DEBUGING
# input=list(region_select="NRM",
#            report_year=2021,
#            value_select="Cape York",
#            reference="Critical",
# shelf="Offshore")
# input=list(region_select="Zones",
#            report_year=2021,
#            value_select="Central",
#            reference="Baseline",
# shelf="All")
# input=list(region_select="GBRMPA.MA",
# report_year=2021,
# value_select="Townsville/Whitsunday Management Area",
# shelf="All")
# input=list(region_select="reef",
# report_year=2021,
# value_select="Pandora (deep slope)")
# output=list()
input=list(region_select="TUMRA",
report_year=2022,
value_select="Girrigun",
shelf="All")
##Load Files####
# load("GIS/reef.LatLongs.RData")
# reefs=list(reef.LatLongs$REEF)
gbrmpa<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Great_Barrier_Reef_Marine_Park_Boundary/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
mutate(Region="GBR", Name="GBRMP")%>%
select(Name,Region, geometry)
library(shinydashboard)
library(leaflet)
library(leaflet.esri)
library(tidyverse)
library(readr)
library(sf)
library(gisaimsr)
library(data.table)
library(fontawesome)
library(dataaimsr)
library(shinythemes)
library(shinyWidgets)
# library(shiny)
# library(shinydashboard)
# library(gisaimsr)
# library(sf)
# library(leaflet)
# library(shiny)
#Ancilliary Functions
source("scripts/plotting_functions/reef_mapping.R")
source("scripts/plotting_functions/radial.plot.summary.R")
source("scripts/plotting_functions/temporal_plots.R")
source("scripts/plotting_functions/comp_change.R")
source("scripts/plotting_functions/DonutCond.R")
source("scripts/Misc/HighLevel_Classification.R")
source("scripts/Misc/Rep_3.1_Regional_autoText_working.R")
source("scripts/Misc/Rep_3.1_Reef_autoText.R")
get_reef<-function(reefName){
reef<-reefs%>%
filter(Name==reefName)
return(reef)
}
get_reefs<-function(selVal="Townsville/Whitsunday Management Area"){
if(length(selVal)==0){
this.reefs=NA
}else{
this.region<-regions%>%
filter(Name==selVal)%>%
st_make_valid()%>%
st_transform(4326)
this.reefs<-reefs%>%
st_filter(x = ., y=this.region)
}
return(this.reefs)
}
# ##DEBUGING
# input=list(region_select="NRM",
#            report_year=2021,
#            value_select="Cape York",
#            reference="Critical",
# shelf="Offshore")
# input=list(region_select="Zones",
#            report_year=2021,
#            value_select="Central",
#            reference="Baseline",
# shelf="All")
# input=list(region_select="GBRMPA.MA",
# report_year=2021,
# value_select="Townsville/Whitsunday Management Area",
# shelf="All")
# input=list(region_select="reef",
# report_year=2021,
# value_select="Pandora (deep slope)")
# output=list()
input=list(region_select="TUMRA",
report_year=2022,
value_select="Girrigun",
shelf="All")
##Load Files####
# load("GIS/reef.LatLongs.RData")
# reefs=list(reef.LatLongs$REEF)
gbrmpa<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Great_Barrier_Reef_Marine_Park_Boundary/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
mutate(Region="GBR", Name="GBRMP")%>%
select(Name,Region, geometry)
tumra<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Traditional_Use_of_Marine_Resources_Agreement_areas/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
select(NAME, geometry)%>%rename(Name=NAME)%>%
group_by(Name)%>%
mutate(Region="TUMRA")
ma<-st_read("https://services8.arcgis.com/ll1QQ2mI4WMXIXdm/arcgis/rest/services/Management_Areas_of_the_Great_Barrier_Reef_Marine_Park/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson",quiet = T)%>%
select(AREA_DESCR, geometry)%>%rename(Name=AREA_DESCR)%>%
mutate(Region="GBRMPA_Management")
nrm<-nrm_regions%>%
select(NAME, geometry)%>%rename(Name=NAME)%>%
mutate(Region= "NRM")
## Zones
northern.bbox <- st_bbox(c(xmin = 142, xmax = 155, ymin = -15.4, ymax = 0)) %>%
st_as_sfc() %>%
st_sf(crs = st_crs(gbrmpa)) %>%
mutate(Zone = 'Northern')
central.bbox <- rbind(c(142,-20.7),
c(148.7,-20.7),
c(152,-19.6),
c(152,-15.4),
c(142,-15.4)) %>%
st_linestring() %>%
st_cast("POLYGON") %>%
st_sfc(crs = st_crs(gbrmpa)) %>%
st_sf() %>%
mutate(Zone = 'Central')
southern.bbox <- rbind(c(142,-20.7),
c(148.7,-20.7),
c(152,-19.6),
c(155,-19.6),
c(155,-25),
c(142,-25)) %>%
st_linestring() %>%
st_cast("POLYGON") %>%
st_sfc(crs = st_crs(gbrmpa)) %>%
st_sf() %>%
mutate(Zone = 'Southern')
zones.bbox <- rbind(northern.bbox, central.bbox, southern.bbox)
zones <- gbrmpa %>%
st_intersection(zones.bbox) %>%
mutate(Region = 'ZONE',
Name = Zone) %>%
dplyr::select(-Zone) %>%
suppressMessages() %>%
suppressWarnings()
regions=ma%>%bind_rows(nrm,tumra,zones, gbrmpa)
##Load data
#Placeholder while Recovery Data gets integrated by Murray
scores<-read_csv("Indices.csv")%>%
mutate(Name=case_when(Level=="reef" ~ paste0(Name," (",Depth,")"),
.default=Name))
comp<-read_csv("Composition_change.csv")%>%
mutate(REEF= paste0(REEF," (",DEPTH.f,")"))
reefs<-scores%>%ungroup%>%
filter(Level=="reef")%>%
select(c(Name,Depth,Latitude,Longitude))%>%
unique()%>%
filter(!is.na(Latitude))%>%
st_as_sf(., coords = c("Longitude", "Latitude"), crs = 4326)
# input=list(region_select="reef",
# report_year=2021,
# value_select="Pandora (deep slope)")
# output=list()
input=list(region_select="TUMRA",
report_year=2022,
value_select="Girringun",
shelf="All")
cat("Selection:", input$value_select, "\n")
if (input$region_select=="reef"){
r<-get_reef(input$value_select)
}else{
r<-get_reefs(selVal = input$value_select)
}
cat(input$value_select)
if(is.null(input$value_select)){
i.df=NULL
dat=NULL
}else{
i.df<-scores%>%filter(
Name==input$value_select)
i.df.r<-scores%>%filter(
Name %in% r$Name)
if (input$region_select=="reef"){
r.shelf=i.df%>%select(Shelf)%>%unique()%>%pull(Shelf)
updateTextInput(session = session, inputId = "shelf",value = r.shelf)
}
i.df<-i.df%>%filter(Shelf %in% input$shelf)
dat<-i.df%>%filter(
Year==input$report_year)
if (dim(dat)[1]>0){
dat<-dat%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
if(dim(i.df)[1]==0){
dat.temp<-data.frame()
}else{
dat.temp<-i.df%>%
filter(Shelf==input$shelf)%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
this.region<-regions%>%
filter(Name==input$value_select)%>%
st_make_valid()%>%
st_transform(4326)
}
map.reefs(sf.frame = i.df.r, reef=r, b=this.region, y=input$report_year)
ref=ifelse(input$reference,"Baseline","Critical")
radial.plot.summary(dat = dat,ref = ref)
ref="Baseline"
radial.plot.summary(dat = dat,ref = ref)
ind.temp.summary(dat.temp)
comp_plot(comp, i.df.r, y=input$report_year, s=input$shelf)
P.Cond(i.df.r, y=input$report_year, s=input$shelf)
input=list(region_select="NRM",
report_year=2022,
value_select="Fitzroy",
reference="Critical",
shelf="All")
cat("Selection:", input$value_select, "\n")
if (input$region_select=="reef"){
r<-get_reef(input$value_select)
}else{
r<-get_reefs(selVal = input$value_select)
}
cat(input$value_select)
if(is.null(input$value_select)){
i.df=NULL
dat=NULL
}else{
i.df<-scores%>%filter(
Name==input$value_select)
i.df.r<-scores%>%filter(
Name %in% r$Name)
if (input$region_select=="reef"){
r.shelf=i.df%>%select(Shelf)%>%unique()%>%pull(Shelf)
updateTextInput(session = session, inputId = "shelf",value = r.shelf)
}
i.df<-i.df%>%filter(Shelf %in% input$shelf)
dat<-i.df%>%filter(
Year==input$report_year)
if (dim(dat)[1]>0){
dat<-dat%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
if(dim(i.df)[1]==0){
dat.temp<-data.frame()
}else{
dat.temp<-i.df%>%
filter(Shelf==input$shelf)%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
this.region<-regions%>%
filter(Name==input$value_select)%>%
st_make_valid()%>%
st_transform(4326)
}
map.reefs(sf.frame = i.df.r, reef=r, b=this.region, y=input$report_year)
ref="Baseline"
radial.plot.summary(dat = dat,ref = ref)
comp_plot(comp, i.df.r, y=input$report_year, s=input$shelf)
P.Cond(i.df.r, y=input$report_year, s=input$shelf)
scores%>%filter(Level=="reef")%>%select(Name)%>%unique()
scores%>%filter(Level=="reef")%>%select(Name)%>%unique()%>%pull(Name)
input=list(region_select="reef",
report_year=2022,
value_select="Gannet Cay (deep slope)")
cat("Selection:", input$value_select, "\n")
if (input$region_select=="reef"){
r<-get_reef(input$value_select)
}else{
r<-get_reefs(selVal = input$value_select)
}
cat(input$value_select)
if(is.null(input$value_select)){
i.df=NULL
dat=NULL
}else{
i.df<-scores%>%filter(
Name==input$value_select)
i.df.r<-scores%>%filter(
Name %in% r$Name)
if (input$region_select=="reef"){
r.shelf=i.df%>%select(Shelf)%>%unique()%>%pull(Shelf)
updateTextInput(session = session, inputId = "shelf",value = r.shelf)
}
i.df<-i.df%>%filter(Shelf %in% input$shelf)
dat<-i.df%>%filter(
Year==input$report_year)
if (dim(dat)[1]>0){
dat<-dat%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
if(dim(i.df)[1]==0){
dat.temp<-data.frame()
}else{
dat.temp<-i.df%>%
filter(Shelf==input$shelf)%>%
mutate(Classification=case_when(
Lower > 0.5 ~ "Above",
Upper < 0.5 ~ "Below",
is.na(Lower) ~ NA,
.default="Within"))
}
this.region<-regions%>%
filter(Name==input$value_select)%>%
st_make_valid()%>%
st_transform(4326)
}
ref="Baseline"
radial.plot.summary(dat = dat,ref = ref)
comp_plot(comp, i.df.r, y=input$report_year, s=input$shelf)
input$shelf="Inshore"
comp_plot(comp, i.df.r, y=input$report_year, s=input$shelf)
P.Cond(i.df.r, y=input$report_year, s=input$shelf)
ind.temp.summary(dat.temp)
